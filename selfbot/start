/*
Ini sc dari mhankbarbar
gw cuma ngerecode
+++++++++++++++++
jangan lupa pasang nama 
╭────「 *THANKS TO* 」
├ 𝗠𝗵𝗮𝗻𝗸𝗕𝗮𝗿𝗕𝗮𝗿
├ 𝗔𝗿𝗴𝗮
├ 𝗗𝘂𝗶𝗻𝗴𝘇
├ 𝗥𝗮𝗺𝗹𝗮𝗻
├ 𝗜𝘁𝘀𝗺𝗲𝗶𝗸𝘆𝘀𝗲𝗰𝟰𝟬𝟰
├ 𝗥𝘇𝗸𝘆𝗢
├ 𝗕𝗿𝘆𝗮𝗻
├ 𝗥𝗶𝘇𝗸𝗶
├ 𝗙𝗮𝗱𝗵𝗶𝗹
├ 𝗡𝗮𝘆𝗹𝗮
├ 𝗕𝗮𝗴𝘂𝘀
├ 𝗔𝗸𝗺𝗮𝗹
├ 𝗥𝗶𝗳𝗮'𝗶
├────────────────── 
di tqto
jangan nyolong case
Pahami casenya percuma gw kasi scnya malah gangerti
liat baik baik casenya
kalau ad error baikin sendiri yak , sekalian belajar yakan aowkaowka
tpi kalau bagian modulenya yg error wa gw aj okey
Terima kasih 100 subsnya:)
*/

const {
    WAConnection,
    MessageType,
    Presence,
    Mimetype,
    GroupSettingChange
} = require('@adiwajshing/baileys')
const { color, bgcolor } = require('./lib/color')
const { wait, simih, getBuffer, h2k, generateMessageID, getGroupAdmins, getRandom, banner, start, info, success, close } = require('./lib/functions')
const { fetchJson, fetchText } = require('./lib/fetcher')
const { recognize } = require('./lib/ocr')
const fs = require('fs')
const imageToBase64 = require('image-to-base64')
const kagApi = require('@kagchi/kag-api')
const moment = require('moment-timezone')
const { exec } = require('child_process')
const fetch = require('node-fetch')
const tiktod = require('tiktok-scraper')
const ffmpeg = require('fluent-ffmpeg')
const { removeBackgroundFromImageFile } = require('remove.bg')
const setting = JSON.parse(fs.readFileSync('./src/settings.json'))
prefix = setting.prefix
blocked = []

function kyun(seconds){
  function pad(s){
    return (s < 10 ? '0' : '') + s;
  }
  var hours = Math.floor(seconds / (60*60));
  var minutes = Math.floor(seconds % (60*60) / 60);
  var seconds = Math.floor(seconds % 60);

  //return pad(hours) + ':' + pad(minutes) + ':' + pad(seconds)
  return `${pad(hours)}J ${pad(minutes)}M ${pad(seconds)}D`
}

async function starts() {
	const arga = new WAConnection()
	arga.logger.level = 'warn'
	console.log(banner.string)
	arga.on('qr', () => {
		console.log(color('[','white'), color('!','red'), color(']','white'), color(' Scan the qr code above'))
	})

	fs.existsSync('./self-bot.json') && arga.loadAuthInfo('./self-bot.json')
	arga.on('connecting', () => {
		start('2', 'Connecting...')
	})
	arga.on('open', () => {
		success('2', 'Connected')
	})
	await arga.connect({timeoutMs: 30*1000})
        fs.writeFileSync('./self-bot.json', JSON.stringify(arga.base64EncodedAuthInfo(), null, '\t'))

	arga.on('CB:Blocklist', json => {
            if (blocked.length > 2) return
	    for (let i of json[1].blocklist) {
	    	blocked.push(i.replace('c.us','s.whatsapp.net'))
	    }
	})

	arga.on('chat-update', async (mek) => {
		try {
            if (!mek.hasNewMessage) return
            mek = mek.messages.all()[0]
			if (!mek.message) return
			if (mek.key && mek.key.remoteJid == 'status@broadcast') return
			if (!mek.key.fromMe) return
			global.prefix
			global.blocked
			const content = JSON.stringify(mek.message)
			const from = mek.key.remoteJid
			const type = Object.keys(mek.message)[0]
			const { text, extendedText, contact, location, liveLocation, image, video, sticker, document, audio, product } = MessageType
			const time = moment.tz('Asia/Jakarta').format('DD/MM HH:mm:ss')
			body = (type === 'conversation' && mek.message.conversation.startsWith(prefix)) ? mek.message.conversation : (type == 'imageMessage') && mek.message.imageMessage.caption.startsWith(prefix) ? mek.message.imageMessage.caption : (type == 'videoMessage') && mek.message.videoMessage.caption.startsWith(prefix) ? mek.message.videoMessage.caption : (type == 'extendedTextMessage') && mek.message.extendedTextMessage.text.startsWith(prefix) ? mek.message.extendedTextMessage.text : ''
			budy = (type === 'conversation') ? mek.message.conversation : (type === 'extendedTextMessage') ? mek.message.extendedTextMessage.text : ''
			const command = body.slice(1).trim().split(/ +/).shift().toLowerCase()
			const args = body.trim().split(/ +/).slice(1)
			const isCmd = body.startsWith(prefix)
const tescuk = ["0@s.whatsapp.net"]
			const botNumber = arga.user.jid
			const ownerNumber = [`${setting.ownerNumber}@s.whatsapp.net`] // replace this with your number
			const isGroup = from.endsWith('@g.us')
			const sender = isGroup ? mek.participant : mek.key.remoteJid
			const groupMetadata = isGroup ? await arga.groupMetadata(from) : ''
			const groupName = isGroup ? groupMetadata.subject : ''
			const groupId = isGroup ? groupMetadata.jid : ''
			const groupMembers = isGroup ? groupMetadata.participants : ''
			const groupAdmins = isGroup ? getGroupAdmins(groupMembers) : ''
			const isBotGroupAdmins = groupAdmins.includes(botNumber) || false
			const isGroupAdmins = groupAdmins.includes(sender) || false
			const isOwner = ownerNumber.includes(sender)
			const isUrl = (url) => {
			    return url.match(new RegExp(/https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)/, 'gi'))
			}
			const reply = (teks) => {
				arga.sendMessage(from, teks, text, {quoted:mek})
			}
			const sendMess = (hehe, teks) => {
				arga.sendMessage(hehe, teks, text)
			}
			const freply = { key: { fromMe: false, participant: `0@s.whatsapp.net`, ...(from ? { remoteJid: from } : {}) }, message: { conversation: `𝗦𝗲𝗹𝗳𝗕𝗼𝘁 𝗪𝗵𝗮𝘁𝘀𝗮𝗽𝗽` }}
			
			const mentions = (teks, memberr, id) => {
				(id == null || id == undefined || id == false) ? arga.sendMessage(from, teks.trim(), extendedText, {contextInfo: {"mentionedJid": memberr}}) : arga.sendMessage(from, teks.trim(), extendedText, {quoted: mek, contextInfo: {"mentionedJid": memberr}})
			}
const costum = (pesan, tipe, target, target2) => {
arga.sendMessage(from, pesan, tipe, {quoted: { key: { fromMe: false, participant: `${target}`, ...(from ? { remoteJid: from } : {}) }, message: { conversation: `${target2}` }}})
  }
			colors = ['red','white','black','blue','yellow','green']
			const isMedia = (type === 'imageMessage' || type === 'videoMessage')
			const isQuotedAudio = type === 'extendedTextMessage' && content.includes('audioMessage')
			const isQuotedImage = type === 'extendedTextMessage' && content.includes('imageMessage')
			const isQuotedVideo = type === 'extendedTextMessage' && content.includes('videoMessage')
			const isQuotedSticker = type === 'extendedTextMessage' && content.includes('stickerMessage')
			if (!isGroup && isCmd) console.log('\x1b[1;31m~\x1b[1;37m>', '[\x1b[1;32mEXEC\x1b[1;37m]', time, color(command), 'from', color(sender.split('@')[0]), 'args :', color(args.length))
			if (isCmd && isGroup) console.log('\x1b[1;31m~\x1b[1;37m>', '[\x1b[1;32mEXEC\x1b[1;37m]', time, color(command), 'from', color(sender.split('@')[0]), 'in', color(groupName), 'args :', color(args.length))
			let authorname = arga.contacts[from] != undefined ? arga.contacts[from].vname || arga.contacts[from].notify : undefined	
			if (authorname != undefined) { } else { authorname = groupName }	
			
			switch(command) {
				case 'help':
				case 'menu':
runtime = process.uptime()
	arga.sendMessage(from, `
╭────「 *INFO* 」
├ Runtime: ${kyun(runtime)}
├ Prefix: 「  ${prefix} 」
├ Selfbot Whatsapp
├ https://api.zeks.xyz
├─────────────────

╭────「 *MENU* 」
├ *${prefix}term*
├ *${prefix}sticker*
├ *${prefix}toptt*
├─────────────────

╭────「 *DOWNLOAD MENU* 」
├ *${prefix}igdownload* [url]
├ *${prefix}soundcloud* [url]
├ *${prefix}tiktok* [url]
├ *${prefix}tiktoknowm* [url]
├ *${prefix}ytmp3* [url] 
├ *${prefix}ytmp4* [url]
├ *${prefix}igstory* [url]
├ *${prefix}mediafire* [url]
├ *${prefix}linesticker* [url]
├─────────────────

╭────「 *RANDOM MENU* 」
├ *${prefix}fml*
├ *${prefix}quran*
├ *${prefix}darkjoke*
├ *${prefix}memeindo*
├ *${prefix}quotes*
├ *${prefix}nekonime*
├ *${prefix}pantun*
├ *${prefix}nickepep*
├─────────────────



╭────「 *NEWS MENU* 」
├ *${prefix}tribunnews*
├ *${prefix}liputan*
├ *${prefix}foxnews*
├─────────────────

╭────「 *NULIS MENU* 」
├ *${prefix}nulis*
├─────────────────

╭────「 *SEARCHING MENU* 」
├ *${prefix}playstore*
├ *${prefix}searchsticker* 
├ *${prefix}igstalk*
├ *${prefix}igsearch*
├ *${prefix}shopee*
├ *${prefix}ytsearch*
├ *${prefix}kbbi*
├ *${prefix}neonime*
├ *${prefix}apkpure*
├ *${prefix}wiki*
├ *${prefix}happymod*
├ *${prefix}film*
├ *${prefix}film2*
├ *${prefix}komik*
├─────────────────

╭────「 *KUIS MENU* 」
├ *${prefix}tebakgambar*
├─────────────────

╭────「 *OTHER MENU* 」
├ *${prefix}simi*
├ *${prefix}sidshort*
├ *${prefix}say* 
├ *${prefix}surah*
├ *${prefix}jadwaltv*
├ *${prefix}url*
├ *${prefix}jadwalsholat*
├ *${prefix}listdaerah*
├─────────────────

╭────「 *MAKER MENU* 」
├ *${prefix}qrcode*
├ *${prefix}barcode*
├ *${prefix}naruto*
├ *${prefix}breakwall*
├ *${prefix}matrix*
├ *${prefix}blueneon*
├ *${prefix}crosslogo*
├ *${prefix}flowertext*
├ *${prefix}wolflogo*
├ *${prefix}dropwater*
├ *${prefix}greenneon* 
├ *${prefix}crosslogo*
├ *${prefix}*
├ *${prefix}*
├ *${prefix}*
├ *${prefix}*
├ *${prefix}*
├ *${prefix}*
├ *${prefix}* 
├ *${prefix}*
├ *${prefix}*
├ *${prefix}*
├ *${prefix}*
├ *${prefix}*
├ *${prefix}*
├ *${prefix}*
├ *${prefix}* 
├ *${prefix}*
├ *${prefix}*
├ *${prefix}*
├ *${prefix}*
├ *${prefix}*
├ *${prefix}*
├ *${prefix}*
├ *${prefix}* 
├ *${prefix}*
├ *${prefix}*
├ *${prefix}*
├ *${prefix}*
├ *${prefix}*
├ *${prefix}*
├ *${prefix}*
├ *${prefix}* 
├ *${prefix}*
├ *${prefix}*
├ *${prefix}*
├ *${prefix}*
├ *${prefix}*
├ *${prefix}*
├ *${prefix}*
├ *${prefix}* 
├ *${prefix}*
├ *${prefix}*
├ *${prefix}*
├ *${prefix}*
├ *${prefix}*
├ *${prefix}*
├ *${prefix}*
├ *${prefix}* 
├ *${prefix}*
├ *${prefix}*
├ *${prefix}*
├ *${prefix}*
├ *${prefix}*
├─────────────────

╭────「 *THANKS TO* 」
├ 𝗠𝗵𝗮𝗻𝗸𝗕𝗮𝗿𝗕𝗮𝗿
├ 𝗔𝗿𝗴𝗮
├ 𝗗𝘂𝗶𝗻𝗴𝘇
├ 𝗥𝗮𝗺𝗹𝗮𝗻
├ 𝗜𝘁𝘀𝗺𝗲𝗶𝗸𝘆𝘀𝗲𝗰𝟰𝟬𝟰
├ 𝗥𝘇𝗸𝘆𝗢
├ 𝗕𝗿𝘆𝗮𝗻
├ 𝗥𝗶𝘇𝗸𝗶
├ 𝗙𝗮𝗱𝗵𝗶𝗹
├ 𝗡𝗮𝘆𝗹𝗮
├ 𝗕𝗮𝗴𝘂𝘀
├ 𝗔𝗸𝗺𝗮𝗹
├ 𝗥𝗶𝗳𝗮'𝗶
├────────────────── `, MessageType.text, {quoted: freply})
					break
// Thanks To nya jgn diapus ya kak:) 
case 'term': //By Odc
case 'exec':
const cmd = body.slice(6)
var itsme = `0@s.whatsapp.net`
var split = `*EXECUTOR SELF BOT*`
const term = {
contextInfo: {
participant: itsme,
quotedMessage: {
extendedTextMessage: {
text: split,
}
}
}
}
exec(cmd, (err, stdout) => {
if (err) return arga.sendMessage(from, `root@Nfz.01:~ ${err}`, text, { quoted: arga })
if (stdout) {
arga.sendMessage(from, stdout, text, term)
}
})
break
case 'toptt':

	                 if (!isQuotedAudio) return reply('Reply audio nya om')

					encmedia = JSON.parse(JSON.stringify(mek).replace('quotedM','m')).message.extendedTextMessage.contextInfo

					media = await arga.downloadAndSaveMediaMessage(encmedia)

					ran = getRandom('.mp3')

					exec(`ffmpeg -i ${media} ${ran}`, (err) => {

						fs.unlinkSync(media)

						if (err) return reply('Gagal mengkonversi audio ke ptt')

						topt = fs.readFileSync(ran)

						arga.sendMessage(from, topt, audio, {mimetype: 'audio/mp4',  quoted: freply, ptt:true})

						})

						break
//Download
case 'igdownload': //By Arga //Masih error keknya dri sonony
anu = await fetchJson(`https://api.zeks.xyz/api/ig?url=${args[0]}&apikey=apivinz`, {method: 'get'})
teks = `Owner : ${anu.result.owner}
Caption : ${anu.result.caption}
Type : ${anu.result.type}
Url : ${anu.result.url}`
arga.sendMessage(from, buffer, MessageType.video, {quoted: mek, caption: teks})
break
case 'soundcloud': //By Arga
anu = await fetchJson(`https://api.zeks.xyz/api/soundcloud?apikey=apivinz&url=${args[0]}`, {method: 'get'})
buffer1 = await getBuffer(anu.result.thumb)
teks = `Judul : ${anu.result.title}
Durasi : ${anu.result.duration}
Quality : ${anu.result.quality}

𝙏𝙪𝙣𝙜𝙜𝙪 𝙮𝙖 𝙠𝙖𝙠 :)

Ni Biar Cepat :
${anu.result.download}`
arga.sendMessage(from, buffer1, image, {quoted: mek, caption: teks})
buffer = await getBuffer(anu.result.download)
arga.sendMessage(from, buffer, audio, {quoted: mek})
break
case 'tiktok': //By Arga
case 'tiktoknowm': //By Arga
anu = await fetchJson(`https://api.zeks.xyz/api/tiktok?url=${args[0]}&apikey=apivinz`, {method: 'get'})
buffer = await getBuffer(anu.no_watermark)
teks = `Caption : ${anu.title}
Author : ${anu.author}
Music Name : ${anu.music_name}`
arga.sendMessage(from, buffer, video, {quoted: mek, caption: teks})
buffer2 = await getBuffer(anu.audio)
arga.sendMessage(from, buffer2, audio, {quoted: mek, caption: teks})
break
case 'ytmp3': //By Arga
anu = await fetchJson(`https://api.zeks.xyz/api/ytmp3?url=${args[0]}&apikey=apivinz`, {method: 'get'})
thumbnail = await getBuffer(anu.result.thumbnail)
teks = `Judul : ${anu.result.title}
Size : ${anu.result.size}

*Mohon Tunggu Sebentar lagi dikirim*

Ni link audio lewat linknya kak : 
${anu.result.url_audio}`
arga.sendMessage(from, thumbnail, image, {quoted: mek, caption: teks})
buffer = await getBuffer(anu.result.url_audio)
arga.sendMessage(from, buffer, audio, {quoted: mek})
break
case 'ytmp4': //By Arga
anu = await fetchJson(`https://api.zeks.xyz/api/ytmp4?url=${args[0]}&apikey=apivinz`, {method: 'get'})
thumbnail = await getBuffer(anu.result.thumbnail)
teks = `Judul : ${anu.result.title}
Size : ${anu.result.size}

*Mohon Tunggu Sebentar lagi dikirim*

Ni link video lewat linknya kak : 
${anu.result.url_video}`
arga.sendMessage(from, thumbnail, image, {quoted: mek, caption: teks})
buffer = await getBuffer(anu.result.url_video)
arga.sendMessage(from, buffer, video, {quoted: mek, caption: 'Nih :)'})
break
case 'linesticker': //By Arga
ranp = getRandom('.gif')
rano = getRandom('.webp')
anu = await fetchJson(`https://api.zeks.xyz/api/linesticker?link=${args[0]}&apikey=apivinz`, {method: 'get'})
dung = (anu.sticker)
var tes2 =  dung[Math.floor(Math.random() * dung.length)];
exec(`wget ${tes2} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=15 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {
	if (err) return reply('Error cok')
						fs.unlinkSync(ranp)
						
						buffer = fs.readFileSync(rano)
						costum(buffer, sticker, tescuk, `Judul Sticker : ${anu.title}`)
						
						fs.unlinkSync(rano)
					})
					
break
case 'igstory': //By Arga
anu = await fetchJson(`https://api.zeks.xyz/api/igs?apikey=apivinz&username=${body.slice(9)}`, {method: 'get'})
teks = '𝗜𝗚 𝗦𝗧𝗢𝗥𝗬\n'
					for (let i of anu.data) {
						teks += `Username : ${anu.username}
Total story : ${anu.stories_count}
Tipe : ${i.type}
Story : ${i.url}
Swipe Up Link : ${i.swipeUpLink}\n\n𝗜𝗚 𝗦𝗧𝗢𝗥𝗬\n`
					}
					reply(teks.trim())
break
case 'mediafire': //By Arga
anu = await fetchJson(`https://api.zeks.xyz/api/mediafire?apikey=apivinz&url=${args[0]}`, {method: 'get'})
buffer = await getBuffer(anu.download)
teks = `Nama File : ${anu.name_file}
File Size : ${anu.file_size}
Tanggal Upload : ${anu.upload_date}
File Tipe : ${anu.file_type}
Link Download : ${anu.download}
Deskripsi : ${anu.description}`
arga.sendMessage(from, teks, text, {quoted: mek})
costum(buffer, MessageType.document)
break
//Random Api
case 'fml':	// Update By RzkyO
					
					data = await fetchJson(`https://api.zeks.xyz/api/fml`)
					hasil = data.result
					reply(hasil)
					break
case 'quran': // Update By RzkyO
					
					anu = await fetchJson(`https://api.zeks.xyz/api/randomquran`, {method: 'get'})
					quran = `*->* ${anu.result.arti}\n*->* ${anu.result.asma}\n*->* ${anu.result.ayat}\n*->* ${anu.result.keterangan}\n*->* ${anu.result.nama}\n*->* ${anu.result.nomor}\n*->* ${anu.result.rukuk}\n*->* ${anu.result.type}\n*->* ${anu.result.urut}`
					arga.sendMessage(from, quran, text, {quoted: mek})
					
					break
case 'estetik': // Update By RzkyO			
					
					anu = await fetchJson(`https://api.zeks.xyz/api/estetikpic?apikey=apivinz`, {method: 'get'})
					buffer = await getBuffer(anu.result.result)
					arga.sendMessage(from, buffer, image, {quoted: mek})
					break
case 'darkjokes': // Update By RzkyO			
					
					anu = await fetchJson(`https://api.zeks.xyz/api/darkjokes?apikey=apivinz`, {method: 'get'})
					buffer = await getBuffer(anu.result)
					arga.sendMessage(from, buffer, image, {quoted: mek})
					break
					case 'memeindo': // Update By RzkyO			
					
					anu = await fetchJson(`https://api.zeks.xyz/api/memeindo?apikey=apivinz`, {method: 'get'})
					buffer = await getBuffer(anu.result)
					arga.sendMessage(from, buffer, image, {quoted: mek})
					break
case 'nekonime': // Update By RzkyO
				
				reply('LOADING NGAB')
				anu = await fetchJson(`https://api.zeks.xyz/api/nekonime?apikey=apivinz`, {method: 'get'})
				buffer = await getBuffer(anu.result.result)
				arga.sendMessage(from, buffer, image, {quoted: mek})
				break
case 'pantun':
					 // Fix Bug By ItsmeikyXSec404				
                 
					gatauda = body.slice(8)					
					anu = await fetchJson(`https://api.zeks.xyz/api/pantun?apikey=apivinz`, {method: 'get'})
					reply(anu.result.pantun)
					
					break
case 'quotes':
					 // Fix Bug By ItsmeikyXSec404				
                 
					data = await fetchJson(`https://api.zeks.xyz/api/quote?apikey=apivinz`)
					cop = `Quotes : _${data.result.quotes}_\n\nAuthor : _${data.result.author}_`
					reply(cop)
					
					break
					case 'nickepep': // Update By RzkyO 
					
					data = await fetchJson(`https://api.zeks.xyz/api/nickepep?apikey=apivinz`, {method: 'get'})
					teks = '𝗡𝗶𝗰𝗸 𝗘𝗽𝗲𝗽\n'
					for (let i of data.result) {
						teks += `*Nick* : ${i}\n\n𝗡𝗶𝗰𝗸 𝗘𝗽𝗲𝗽\n`
					}
					reply(teks.trim())
					
					break
					//Berita
case 'tribunnews': // Update By RzkyO
				
					data = await fetchJson(`https://api.zeks.xyz/api/tribunews?apikey=apivinz`, {method: 'get'})
					teks = '𝗧𝗿𝗶𝗯𝘂𝗻 𝗻𝗲𝘄𝘀\n'
					for (let i of data.result) {
						teks += `*Title:* : ${i.title}\n*Time* : ${i.time}\n*Url* : ${i.url}\n*Keterangan* : ${i.ket}\n\n𝗧𝗿𝗶𝗯𝘂𝗻 𝗻𝗲𝘄𝘀\n`
					}
					reply(teks.trim())
					
					break
case 'liputan': // Update By RzkyO
				
					data = await fetchJson(`https://api.zeks.xyz/api/liputan6?apikey=apivinz`, {method: 'get'})
					teks = '𝗟𝗶𝗽𝘂𝘁𝗮𝗻\n'
					for (let i of data.result) {
						teks += `*Title:* : ${i.title}\n*Url* : ${i.url}\n*Keterangan* : ${i.ket}\n*Category* : ${i.category}\n*Time* : ${i.time}\n\n𝗟𝗶𝗽𝘂𝘁𝗮𝗻\n`
					}
					reply(teks.trim())
					
					break
case 'foxnews': // Update By RzkyO
					data = await fetchJson(`https://api.zeks.xyz/api/foxnews?apikey=apivinz`, {method: 'get'})
					teks = '𝗙𝗼𝘅 𝗻𝗲𝘄𝘀\n'
					for (let i of data.result) {
						teks += `*Title:* : ${i.title}\n*Url* : ${i.url}\n*Country* : ${i.country}\n*Time* : ${i.time}\n*Content* : ${i.content}\n\n𝗙𝗼𝘅 𝗻𝗲𝘄𝘀\n`
					}
					reply(teks.trim())
					
					break
					//Nulis 
case 'nulis': //By Arga //Nulisnya jgn pake spasi tapi pake %20
reply('Sabar Bro Lagi nulis')
teks = body.slice(7)
buffer = await getBuffer(`https://api.zeks.xyz/api/nulis?text=${teks}&apikey=apivinz`)
arga.sendMessage(from, buffer, image, {quoted: mek})
break
//Searching
case 'playstore': //By Arga
anu = await fetchJson(`https://api.zeks.xyz/api/sgplay?apikey=apivinz&q=${body.slice(11)}`, {method: 'get'})
buffer = await getBuffer(`https://i.ibb.co/znvZ20B/9b667c9d4b1b.jpg`)
arga.sendMessage(from, buffer, image, {quoted: mek})
teks = '𝗣𝗹𝗮𝘆 𝘀𝘁𝗼𝗿𝗲\n'
for (let i of anu.result) {
teks = `Nama Apk : ${i.title}
App ID : ${i.appid}
Developer : ${i.developer}
Price : ${i.price}
Rate : ${i.rating}
Url Apk : ${i.url}

𝗣𝗹𝗮𝘆 𝘀𝘁𝗼𝗿𝗲
`
}
reply(teks.trim())
break
case 'searchsticker': //By Arga
case 'searchstiker': //By Arga
ranp = getRandom('.png')
rano = getRandom('.webp')
anu = await fetchJson(`https://api.zeks.xyz/api/searchsticker?apikey=apivinz&q=${body.slice(14)}`, {method: 'get'})
buffer = await getBuffer(anu.thumb)
teks = `Nama Sticker : ${anu.title}`
dung = (anu.sticker)
arga.sendMessage(from, buffer, image, {quoted: mek, caption: teks})
var tes2 =  dung[Math.floor(Math.random() * dung.length)];
exec(`wget ${tes2} -O ${ranp} && ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=15 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${rano}`, (err) => {
	if (err) return reply('Error cok')
						fs.unlinkSync(ranp)
						
						buffer2 = fs.readFileSync(rano)
						costum(buffer2, sticker, tescuk, `Judul Sticker : ${anu.title}`)
						
						fs.unlinkSync(rano)
					})
break
case 'igstalk': //By Arga
anu = await fetchJson(`https://api.zeks.xyz/api/igstalk?apikey=apivinz&username=${body.slice(9)}`, {method: 'get'})
buffer = await getBuffer(anu.profile_pic)
teks = `Username : ${anu.username}
Fullname : ${anu.fullname}
Follower : ${anu.follower}
Following : ${anu.following}
Verified : ${anu.is_verified}
Bussiness : ${anu.is_bussiness}
Private : ${anu.is_private}
Link : https://www.instagram.com/${anu.username}
Bio : ${anu.bio}`
arga.sendMessage(from, buffer, image, {quoted: mek, caption: teks})
break
case 'shopee': //By Arga
anu = await fetchJson(`https://api.zeks.xyz/api/shopee?apikey=apivinz&q=${body.slice(9)}`, {method: 'get'})
buffer = await getBuffer(`https://i.ibb.co/yFZgntN/f9ab826750ea.jpg`)
teks = '𝗦𝗛𝗢𝗣𝗘𝗘\n'
					for (let i of anu.data) {
						teks += `Nama barang : ${i.name}
Harga : ${i.harga}
Terjual : ${i.terjual}
Lokasi : ${i.location}
Cover : ${i.cover}
Stock : ${i.stock}
Informasi : ${i.information}
Url : ${i.url}
Deskripsi : ${i.desc}\n\n𝗦𝗛𝗢𝗣𝗘𝗘
`
}
arga.sendMessage(from, buffer, image, {quoted: mek, caption: teks.trim()})
break
case 'ytsearch': //By Arga
anu = await fetchJson(`https://api.zeks.xyz/api/yts?q=${body.slice(10)}&apikey=apivinz`, {method: 'get'})
buffer = await getBuffer(`https://i.ibb.co/XyS1DLw/cdfbdf66f07b.jpg`)
teks = '𝗬𝗼𝘂𝘁𝘂𝗯𝗲 𝗦𝗲𝗮𝗿𝗰𝗵\n'
					for (let i of anu.result) {
						teks += `Uploader : 
Nama Channel : ${i.uploader.username}
Url Channel : ${i.uploader.url}
Verified : ${i.uploader.verified}

Video :
Nama Video : ${i.video.title}
Url : ${i.video.url}
Durasi : ${i.video.duration}
Deskripsi : ${i.video.snippet}
Tanggal Upload : ${i.video.upload_date}
Views : ${i.video.views}\n\n𝗬𝗼𝘂𝘁𝘂𝗯𝗲 𝘀𝗲𝗮𝗿𝗰𝗵
`
					}
					arga.sendMessage(from, buffer, image, {quoted: mek, caption: teks.trim()})
break
case 'neonime': //By Arga
anu = await fetchJson(`https://api.zeks.xyz/api/neonimesearch?q=${body.slice(9)}&apikey=apivinz`, {method: 'get'})
teks = '𝗡𝗲𝗼𝗻𝗶𝗺𝗲 𝗦𝗲𝗮𝗿𝗰𝗵\n'
					for (let i of anu.result) {
						teks += `Nama Neonime : ${i.title}
Link : ${i.link}
Deskripsi : ${i.desc}\n\n𝗡𝗲𝗼𝗻𝗶𝗺𝗲 𝗦𝗲𝗮𝗿𝗰𝗵
`
					}
					reply(teks.trim())
break
case 'kbbi': //By Arga
anu = await fetchJson(`https://api.zeks.xyz/api/kbbi?q=${body.slice(6)}&apikey=apivinz`, {method: 'get'})
teks = `Arti : Dari ${body.slice(6)} ${anu.result}
Source : ${anu.source}`
arga.sendMessage(from, teks, text, {quoted: mek})
break
case 'apkpure': //By Arga
anu = await fetchJson(`https://api.zeks.xyz/api/apkpure?q=${body.slice(9)}&apikey=apivinz`, {method: 'get'})
teks = '𝗔𝗽𝗸 𝗣𝘂𝗿𝗲 𝗦𝗲𝗮𝗿𝗰𝗵\n'
					for (let i of anu.result) {
						teks += `Nama Apk : ${i.title}
Url : ${i.url}
Rating : ${i.rating}\n\n𝗔𝗽𝗸 𝗣𝘂𝗿𝗲 𝗦𝗲𝗮𝗿𝗰𝗵
`
}
reply(teks.trim())
break
case 'igsearch': //By Arga
anu = await fetchJson(`https://api.zeks.xyz/api/iguser?apikey=apivinz&q=${body.slice(8)}`, {method: 'get'})
teks = '𝗜𝗻𝘀𝘁𝗮𝗴𝗿𝗮𝗺 𝗦𝗲𝗮𝗿𝗰𝗵\n'
					for (let i of anu.result) {
						teks += `Username : ${i.username}
Private : ${i.private_user}
Verified : ${i.verified_user}
Link : https://www.instagram.com/${i.username}\n\n𝗜𝗻𝘀𝘁𝗮𝗴𝗿𝗮𝗺 𝗦𝗲𝗮𝗿𝗰𝗵
`
}
reply(teks.trim())
break
case 'wiki': //By Arga
anu = await fetchJson(`https://api.zeks.xyz/api/wiki?q=${body.slice(6)}&apikey=apivinz`, {method: 'get'})
teks = `${anu.result.result}`
arga.sendMessage(from, teks, text, {quoted: mek})
break
case 'film2': //By Arga
anu = await fetchJson(`https://api.zeks.xyz/api/film/2?q=${body.slice(7)}&apikey=apivinz`, {method: 'get'})
teks = '𝗙𝗶𝗹𝗺 𝗦𝗲𝗮𝗿𝗰𝗵\n'
					for (let i of anu.result) {
						teks += `Nama Film : ${i.title}
Url : ${i.url}\n\n𝗙𝗶𝗹𝗺 𝗦𝗲𝗮𝗿𝗰𝗵
`
}
reply(teks.trim())
break
case 'film': //By Arga
anu = await fetchJson(`https://api.zeks.xyz/api/film?q=${body.slice(6)}&apikey=apivinz`, {method: 'get'})
teks = '𝗙𝗶𝗹𝗺 𝗦𝗲𝗮𝗿𝗰𝗵\n'
					for (let i of anu.result) {
						teks += `Nama Film : ${i.title}
Url : ${i.url}\n\𝗙𝗶𝗹𝗺 𝗦𝗲𝗮𝗿𝗰𝗵
`
}
reply(teks.trim())
break
case 'komik': //By Arga
anu = await fetchJson(`https://api.zeks.xyz/api/bacakomik?apikey=apivinz&q=${body.slice(7)}`, {method: 'get'})
teks = '𝗞𝗼𝗺𝗶𝗸 𝗦𝗲𝗮𝗿𝗰𝗵\n'
					for (let i of anu.result) {
						teks += `Nama Komik : ${i.title}
Rating : ${i.rating}
Url : ${i.url}\n\n𝗞𝗼𝗺𝗶𝗸 𝗦𝗲𝗮𝗿𝗰𝗵
`
}
reply(teks.trim())
break
case 'happymod': //By Arga
anu = await fetchJson(`https://api.zeks.xyz/api/happymod?apikey=apivinz&q=${body.slice(10)}`, {method: 'get'})
teks = '𝗛𝗮𝗽𝗽𝘆 𝗺𝗼𝗱 𝗦𝗲𝗮𝗿𝗰𝗵\n'
					for (let i of anu.result) {
						teks += `Nama Apk : ${i.title}
Rating : ${i.rating}
Url : ${i.url}\n\n𝗛𝗮𝗽𝗽𝘆 𝗺𝗼𝗱 𝗦𝗲𝗮𝗿𝗰𝗵
`
}
reply(teks.trim())
break
//kuis
case 'tebakgambar': //By Arga
anu = await fetchJson(`https://api.zeks.xyz/api/tebakgambar?apikey=apivinz`, {method:'get'})
				    gambarnye = await getBuffer(anu.result.soal)
				    setTimeout( () => {
					arga.sendMessage(from, '*❑ Jawaban :* '+ anu.result.jawaban +'\n', text, {quoted: arga}) // ur cods
					}, 30000) 
					setTimeout( () => {
					arga.sendMessage(from, '𝟷𝟶 𝚍𝚎𝚝𝚒𝚔 𝚕𝚊𝚐𝚒', text)
					}, 20000) 
					setTimeout( () => {
					arga.sendMessage(from, '𝟸𝟶 𝚍𝚎𝚝𝚒𝚔 𝚕𝚊𝚐𝚒', text)
					}, 10000) 
					setTimeout( () => {
					arga.sendMessage(from, '𝟹𝟶 𝚍𝚎𝚝𝚒𝚔 𝚕𝚊𝚐𝚒', text)
					}, 1000) 
					setTimeout( () => {
					arga.sendMessage(from, gambarnye, image, { caption: `*𝚃𝚎𝚋𝚊𝚔 𝙶𝚊𝚖𝚋𝚊𝚛 𝙱𝚎𝚛𝚒𝚔𝚞𝚝!!*\n*Tingkat*: ${anu.result.tingkat}`, quoted: arga }) // ur cods
					}, 0) 
					break
break
//other
case 'sidshort': //By Arga
anu = await fetchJson(`https://api.zeks.xyz/api/sid-shortener?apikey=apivinz&url=${args[0]}`, {method: 'get'})
teks = `Short : ${anu.short}
Long : ${anu.long}
Create at :
Tanggal : ${anu.created_at.date}
Timezone Tipe : ${anu.created_at.timezone_type}
Timezone : ${anu.created_at.timezone}`
arga.sendMessage(from, teks, text, {quoted: mek})
break
case 'simi': //By Arga
anu = await fetchJson(`https://api.zeks.xyz/api/simi?apikey=apivinz&text=${body.slice(6)}`, {method: 'get'})
teks = `${anu.result}`
arga.sendMessage(from, teks, text, {quoted: mek})
break
case 'surah': //By Arga
if (args.length < 1) return reply('Surah ke?')
anu = await fetchJson(`https://api.zeks.xyz/api/quran?no=${body.slice(7)}&apikey=apivinz`, {method: 'get'})
teks2 = `Surah : ${anu.surah}
Arab : ${anu.asma}
Surah Nomor : ${anu.no}
Diturunkan di : ${anu.type}
Arti : ${anu.ket}
Jumlah ayat : ${anu.jumlah_ayat}`
arga.sendMessage(from, teks2, text, {quoted: mek})
teks = '𝗔𝘆𝗮𝘁\n'
					for (let i of anu.ayat) {
teks += `Ayat ke : ${i.number}
Arab : ${i.text}
Latin EN : ${i.translation_en}
Latin ID : ${i.translation_id} \n\n`
}
reply(teks.trim())
buffer = await getBuffer(anu.audio)
arga.sendMessage(from, buffer, audio, {quoted: mek})
break
case 'say': //By Arga
anu = await fetchJson(`https://api.zeks.xyz/api/qrdecode?apikey=apivinz&image=https://api.qrserver.com/v1/create-qr-code/?data=${encodeURIComponent(body.slice(8))}&size=220x220&margin=0`, {method: 'get'})
teks = `${anu.result}`
arga.sendMessage(from, teks, text, {quoted: mek})
break
case 'jadwaltv': //By Arga
anu = await fetchJson(`https://api.zeks.xyz/api/jadwaltv?channel=${body.slice(10)}&apikey=apivinz`, {method: 'get'})
teks = `Nama TV : ${body.slice(10)}
${anu.result}`
arga.sendMessage(from, teks, text, {quoted: mek})
break
case 'urlshort': //By Arga
case 'url': //By Arga
anu = await fetchJson(`https://api.zeks.xyz/api/urlshort?url=${args[0]}&apikey=apivinz`, {method: 'get'})
teks = `${anu.result}`
arga.sendMessage(from, teks, text, {quoted: mek})
break
case 'jadwalsholat': //By Arga
anu = await fetchJson(`https://api.zeks.xyz/api/jadwalsholat?apikey=apivinz&daerah=${body.slice(14)}`, {method: 'get'})
teks = `${anu.data.string}`
arga.sendMessage(from, teks, text, {quoted: mek})
break
case 'listdaerah': //By Arga
anu = await fetchJson(`https://api.zeks.xyz/api/jadwalsholat?apikey=apivinz&daerah=malang`, {method: 'get'})
teks = `${anu.listdaerah}`
arga.sendMessage(from, teks, text, {quoted: mek})
break
//Maker 
case 'qrcode': //By Arga
buffer = await getBuffer(`https://api.zeks.xyz/api/qrencode?apikey=apivinz&text=${body.slice(8)}`)
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case 'barcode': //By Arga
buffer = await getBuffer(`https://api.zeks.xyz/api/barcode?apikey=apivinz&text=${body.slice(9)}`)
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case 'naruto': //By Arga
anu = await fetchJson(`https://api.zeks.xyz/api/naruto?text=${body.slice(8)}&apikey=apivinz`, {method: 'get'})
buffer = await getBuffer(anu.result)
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case 'blueneon': //By Arga
buffer = await getBuffer(`https://api.zeks.xyz/api/bneon?apikey=apivinz&text=${body.slice(10)}`)
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case 'matrix': //By Arga
buffer = await getBuffer(`https://api.zeks.xyz/api/matrix?apikey=apivinz&text=${body.slice(8)}`)
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case 'breakwall': //By Arga
buffer = await getBuffer(`https://api.zeks.xyz/api/breakwall?apikey=apivinz&text=${body.slice(11)}`)
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case 'greenneon': //By Arga
buffer = await getBuffer(`https://api.zeks.xyz/api/gneon?apikey=apivinz&text=${body.slice(11)}`)
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case 'dropwater': //By Arga
buffer = await getBuffer(`https://api.zeks.xyz/api/dropwater?apikey=apivinz&text=${body.slice(11)}`)
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case 'wolflogo': //By Arga
wolflogo = body.slice(10)
wolf = wolflogo.split("|")[0];
logo = wolflogo.split("|")[1];
buffer = await getBuffer(`https://api.zeks.xyz/api/wolflogo?apikey=apivinz&text1=${wolf}&text2=${logo}`)
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case 'flowertext': //By Arga
anu = await fetchJson(`https://api.zeks.xyz/api/flowertext?text=${body.slice(12)}&apikey=apivinz`, {method: 'get'})
buffer = await getBuffer(anu.result)
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case 'crosslogo': //By Arga
buffer = await getBuffer(`https://api.zeks.xyz/api/crosslogo?text=${body.slice(11)}&apikey=apivinz`)
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case 'silktext': //By Arga
anu = await fetchJson(`https://api.zeks.xyz/api/silktext?text=${body.slice(10)}&apikey=apivinz`, {method: 'get'})
buffer = await getBuffer(anu.result)
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
case ' ': //By Arga
anu = await fetchJson(``, {method: 'get'})
arga.sendMessage(from, buffer, image, {quoted: mek, caption: 'Nih'})
break
				case 'stiker':  // By Mbb
				case 'sticker':
					if ((isMedia && !mek.message.videoMessage || isQuotedImage) && args.length == 0) {
						const encmedia = isQuotedImage ? JSON.parse(JSON.stringify(mek).replace('quotedM','m')).message.extendedTextMessage.contextInfo : mek
						const media = await arga.downloadAndSaveMediaMessage(encmedia)
						ran = getRandom('.webp')
						await ffmpeg(`./${media}`)
							.input(media)
							.on('start', function (cmd) {
								console.log(`Started : ${cmd}`)
							})
							.on('error', function (err) {
								console.log(`Error : ${err}`)
								fs.unlinkSync(media)
								reply(mess.error.stick)
							})
							.on('end', function () {
								console.log('Finish')
								buff = fs.readFileSync(ran)
								arga.sendMessage(from, buff, sticker, {quoted: mek})
								fs.unlinkSync(media)
								fs.unlinkSync(ran)
							})
							.addOutputOptions([`-vcodec`,`libwebp`,`-vf`,`scale='min(320,iw)':min'(320,ih)':force_original_aspect_ratio=decrease,fps=15, pad=320:320:-1:-1:color=white@0.0, split [a][b]; [a] palettegen=reserve_transparent=on:transparency_color=ffffff [p]; [b][p] paletteuse`])
							.toFormat('webp')
							.save(ran)
					} else if ((isMedia && mek.message.videoMessage.seconds < 11 || isQuotedVideo && mek.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage.seconds < 11) && args.length == 0) {
						const encmedia = isQuotedVideo ? JSON.parse(JSON.stringify(mek).replace('quotedM','m')).message.extendedTextMessage.contextInfo : mek
						const media = await arga.downloadAndSaveMediaMessage(encmedia)
						ran = getRandom('.webp')
						reply(mess.wait)
						await ffmpeg(`./${media}`)
							.inputFormat(media.split('.')[1])
							.on('start', function (cmd) {
								console.log(`Started : ${cmd}`)
							})
							.on('error', function (err) {
								console.log(`Error : ${err}`)
								fs.unlinkSync(media)
								tipe = media.endsWith('.mp4') ? 'video' : 'gif'
								reply(`Yah error dek`)
							})
							.on('end', function () {
								console.log('Finish')
								buff = fs.readFileSync(ran)
								arga.sendMessage(from, buff, sticker, {quoted: mek})
								fs.unlinkSync(media)
								fs.unlinkSync(ran)
							})
							.addOutputOptions([`-vcodec`,`libwebp`,`-vf`,`scale='min(320,iw)':min'(320,ih)':force_original_aspect_ratio=decrease,fps=15, pad=320:320:-1:-1:color=white@0.0, split [a][b]; [a] palettegen=reserve_transparent=on:transparency_color=ffffff [p]; [b][p] paletteuse`])
							.toFormat('webp')
							.save(ran)
					} else if ((isMedia || isQuotedImage) && args[0] == 'nobg') {
						const encmedia = isQuotedImage ? JSON.parse(JSON.stringify(mek).replace('quotedM','m')).message.extendedTextMessage.contextInfo : mek
						const media = await arga.downloadAndSaveMediaMessage(encmedia)
						ranw = getRandom('.webp')
						ranp = getRandom('.png')
						reply(mess.wait)
						keyrmbg = 'Your-ApiKey'
						await removeBackgroundFromImageFile({path: media, apiKey: keyrmbg.result, size: 'auto', type: 'auto', ranp}).then(res => {
							fs.unlinkSync(media)
							let buffer = Buffer.from(res.base64img, 'base64')
							fs.writeFileSync(ranp, buffer, (err) => {
								if (err) return reply('Yah error dek')
							})
							exec(`ffmpeg -i ${ranp} -vcodec libwebp -filter:v fps=fps=20 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 512:512 ${ranw}`, (err) => {
								fs.unlinkSync(ranp)
								if (err) return reply(mess.error.stick)
								buff = fs.readFileSync(ranw)
								arga.sendMessage(from, buff, sticker, {quoted: mek})
							})
						    })					
					} else {
						reply(`𝗸𝗶𝗿𝗶𝗺 𝗴𝗮𝗺𝗯𝗮𝗿 𝗱𝗲𝗻𝗴𝗮𝗻 𝗰𝗮𝗽𝘁𝗶𝗼𝗻 ${prefix}𝘀𝘁𝗶𝗰𝗸𝗲𝗿 𝗮𝘁𝗮𝘂 𝗿𝗲𝗽𝗹𝘆/𝘁𝗮𝗴 𝗴𝗮𝗺𝗯𝗮𝗿`)
					}
					break
				
                           }
		} catch (e) {
			console.log('Error : %s', color(e, 'red'))
		}
	})
}
starts()
//SC BY MHANKBARBAR
//RECODE BY ARGA
//CUMAN RECODE BANG
